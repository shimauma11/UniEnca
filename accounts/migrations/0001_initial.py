# Generated by Django 4.2 on 2023-04-29 05:24

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="メールアドレス"
                    ),
                ),
                (
                    "followings",
                    models.ManyToManyField(
                        blank=True,
                        related_name="followers",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nickname", models.CharField(blank=True, max_length=20, null=True)),
                (
                    "gender",
                    models.IntegerField(
                        blank=True,
                        choices=[(0, "男性"), (1, "女性"), (2, "その他")],
                        null=True,
                    ),
                ),
                (
                    "grade",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, "1年生"), (2, "2年生"), (3, "3年生"), (4, "4年生")],
                        null=True,
                    ),
                ),
                (
                    "age",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(18),
                            django.core.validators.MaxValueValidator(120),
                        ],
                    ),
                ),
                (
                    "target",
                    models.IntegerField(
                        blank=True,
                        choices=[(0, "新しい出会いのため"), (1, "単位取得のため")],
                        null=True,
                    ),
                ),
                (
                    "second_target",
                    models.IntegerField(
                        blank=True,
                        choices=[(0, "あなたと似ている人"), (1, "あなたと似ていない人")],
                        null=True,
                    ),
                ),
                (
                    "univ_name",
                    models.CharField(
                        blank=True, max_length=20, null=True, verbose_name="大学名"
                    ),
                ),
                (
                    "faculty",
                    models.CharField(
                        blank=True, max_length=20, null=True, verbose_name="学部名"
                    ),
                ),
                (
                    "major",
                    models.CharField(
                        blank=True, max_length=20, null=True, verbose_name="学科名"
                    ),
                ),
                (
                    "campus",
                    models.CharField(
                        blank=True, max_length=20, null=True, verbose_name="キャンパス名"
                    ),
                ),
                (
                    "profile_text",
                    models.TextField(blank=True, max_length=300, null=True),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Lesson",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("lesson_name", models.CharField(max_length=30, verbose_name="科目名")),
                (
                    "day_of_week",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (0, "日"),
                            (1, "月"),
                            (2, "火"),
                            (3, "水"),
                            (4, "木"),
                            (5, "金"),
                            (6, "土"),
                        ],
                        null=True,
                    ),
                ),
                (
                    "time",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "1限"),
                            (2, "2限"),
                            (3, "3限"),
                            (4, "4限"),
                            (5, "5限"),
                            (6, "6限"),
                            (7, "7限"),
                        ],
                        null=True,
                    ),
                ),
                (
                    "univ_name",
                    models.CharField(
                        blank=True, max_length=20, null=True, verbose_name="大学名"
                    ),
                ),
                (
                    "students",
                    models.ManyToManyField(
                        related_name="lessons", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
    ]
